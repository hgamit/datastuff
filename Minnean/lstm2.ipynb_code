{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-10-28T20:05:00.337147Z",
     "start_time": "2019-10-28T20:03:04.138706Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n",
      "391/391 [==============================] - 2s 5ms/step - loss: 0.1614\n",
      "Epoch 2/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0503\n",
      "Epoch 3/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0390\n",
      "Epoch 4/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0351\n",
      "Epoch 5/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0317\n",
      "Epoch 6/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0316\n",
      "Epoch 7/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0275\n",
      "Epoch 8/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0248\n",
      "Epoch 9/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0244\n",
      "Epoch 10/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0228\n",
      "Epoch 11/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0228\n",
      "Epoch 12/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0213\n",
      "Epoch 13/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0209\n",
      "Epoch 14/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0179\n",
      "Epoch 15/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0204\n",
      "Epoch 16/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0178\n",
      "Epoch 17/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0204\n",
      "Epoch 18/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0180\n",
      "Epoch 19/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0199\n",
      "Epoch 20/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0179\n",
      "Epoch 21/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0212\n",
      "Epoch 22/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0175\n",
      "Epoch 23/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0196\n",
      "Epoch 24/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0210\n",
      "Epoch 25/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0164\n",
      "Epoch 26/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0145\n",
      "Epoch 27/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0162\n",
      "Epoch 28/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0153\n",
      "Epoch 29/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0167\n",
      "Epoch 30/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0144\n",
      "Epoch 31/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0168\n",
      "Epoch 32/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0140\n",
      "Epoch 33/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0152\n",
      "Epoch 34/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0147\n",
      "Epoch 35/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0161\n",
      "Epoch 36/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0153\n",
      "Epoch 37/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0147\n",
      "Epoch 38/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0147\n",
      "Epoch 39/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0147\n",
      "Epoch 40/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0129\n",
      "Epoch 41/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0136\n",
      "Epoch 42/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0129\n",
      "Epoch 43/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0130\n",
      "Epoch 44/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0141\n",
      "Epoch 45/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0137\n",
      "Epoch 46/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0126\n",
      "Epoch 47/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0121\n",
      "Epoch 48/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0136\n",
      "Epoch 49/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0128\n",
      "Epoch 50/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0131\n",
      "Epoch 51/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0117\n",
      "Epoch 52/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0116\n",
      "Epoch 53/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0128\n",
      "Epoch 54/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0123\n",
      "Epoch 55/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0112\n",
      "Epoch 56/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0110\n",
      "Epoch 57/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0135\n",
      "Epoch 58/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0141\n",
      "Epoch 59/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0153\n",
      "Epoch 60/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0134\n",
      "Epoch 61/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0118\n",
      "Epoch 62/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0131\n",
      "Epoch 63/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0107\n",
      "Epoch 64/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0108\n",
      "Epoch 65/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0111\n",
      "Epoch 66/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0111\n",
      "Epoch 67/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0109\n",
      "Epoch 68/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0113\n",
      "Epoch 69/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0110\n",
      "Epoch 70/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0104\n",
      "Epoch 71/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0109\n",
      "Epoch 72/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0097\n",
      "Epoch 73/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0116\n",
      "Epoch 74/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0132\n",
      "Epoch 75/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0129\n",
      "Epoch 76/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0114\n",
      "Epoch 77/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0106\n",
      "Epoch 78/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0114\n",
      "Epoch 79/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0111\n",
      "Epoch 80/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0103\n",
      "Epoch 81/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0109\n",
      "Epoch 82/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0104\n",
      "Epoch 83/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0105\n",
      "Epoch 84/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0101\n",
      "Epoch 85/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0106\n",
      "Epoch 86/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0104\n",
      "Epoch 87/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0101\n",
      "Epoch 88/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0101\n",
      "Epoch 89/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0100\n",
      "Epoch 90/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0103\n",
      "Epoch 91/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0102\n",
      "Epoch 92/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0107\n",
      "Epoch 93/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0102\n",
      "Epoch 94/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0097\n",
      "Epoch 95/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0106\n",
      "Epoch 96/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0096\n",
      "Epoch 97/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0105\n",
      "Epoch 98/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0110\n",
      "Epoch 99/150\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0105\n",
      "Epoch 100/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0089\n",
      "Epoch 101/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0087\n",
      "Epoch 102/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0092\n",
      "Epoch 103/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0094\n",
      "Epoch 104/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0094\n",
      "Epoch 105/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0094\n",
      "Epoch 106/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0112\n",
      "Epoch 107/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0117\n",
      "Epoch 108/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0096\n",
      "Epoch 109/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0099\n",
      "Epoch 110/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0088\n",
      "Epoch 111/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0093\n",
      "Epoch 112/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0096\n",
      "Epoch 113/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0084\n",
      "Epoch 114/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0085\n",
      "Epoch 115/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0091\n",
      "Epoch 116/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0092\n",
      "Epoch 117/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0097\n",
      "Epoch 118/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0097\n",
      "Epoch 119/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0092\n",
      "Epoch 120/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0093\n",
      "Epoch 121/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0099\n",
      "Epoch 122/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0091\n",
      "Epoch 123/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0091\n",
      "Epoch 124/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0090\n",
      "Epoch 125/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0088\n",
      "Epoch 126/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0084\n",
      "Epoch 127/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0084\n",
      "Epoch 128/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0090\n",
      "Epoch 129/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0090\n",
      "Epoch 130/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0086\n",
      "Epoch 131/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0093\n",
      "Epoch 132/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0083\n",
      "Epoch 133/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0094\n",
      "Epoch 134/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0097\n",
      "Epoch 135/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0089\n",
      "Epoch 136/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0092\n",
      "Epoch 137/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0087\n",
      "Epoch 138/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0086\n",
      "Epoch 139/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0088\n",
      "Epoch 140/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0081\n",
      "Epoch 141/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0116\n",
      "Epoch 142/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0103\n",
      "Epoch 143/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0091\n",
      "Epoch 144/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0086\n",
      "Epoch 145/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0091\n",
      "Epoch 146/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0080\n",
      "Epoch 147/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0079\n",
      "Epoch 148/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0079\n",
      "Epoch 149/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0075\n",
      "Epoch 150/150\n",
      "391/391 [==============================] - 1s 2ms/step - loss: 0.0084\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.callbacks.History at 0x2040428aef0>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Recurrent Neural Network\n",
    "\n",
    "#https://www.youtube.com/watch?v=zwqwlR48ztQ\n",
    "\n",
    "# Recurrent Neural Network\n",
    "\n",
    "# Part 1 - Data Preprocessing\n",
    "\n",
    "# Importing the libraries\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "# Importing the training set\n",
    "dataset_train = pd.read_csv('./marketdata/soybean/zsh20.csv')\n",
    "training_set = dataset_train.iloc[:, 4:5].values\n",
    "\n",
    "\n",
    "\n",
    "# Feature Scaling\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "sc = MinMaxScaler(feature_range = (0, 1))\n",
    "training_set_scaled = sc.fit_transform(training_set)\n",
    "\n",
    "# Creating a data structure with 60 timesteps and 1 output\n",
    "X_train = []\n",
    "y_train = []\n",
    "for i in range(60, len(training_set_scaled)):\n",
    "    X_train.append(training_set_scaled[i-60:i, 0])\n",
    "    y_train.append(training_set_scaled[i, 0])\n",
    "X_train, y_train = np.array(X_train), np.array(y_train)\n",
    "\n",
    "# Reshaping\n",
    "X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\n",
    "\n",
    "\n",
    "\n",
    "# Part 2 - Building the RNN\n",
    "\n",
    "# Importing the Keras libraries and packages\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.layers import LSTM\n",
    "from keras.layers import Dropout\n",
    "\n",
    "# Initialising the RNN\n",
    "regressor = Sequential()\n",
    "\n",
    "# Adding the first LSTM layer and some Dropout regularisation\n",
    "regressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))\n",
    "regressor.add(Dropout(0.2))\n",
    "\n",
    "# Adding a second LSTM layer and some Dropout regularisation\n",
    "regressor.add(LSTM(units = 50, return_sequences = True))\n",
    "regressor.add(Dropout(0.2))\n",
    "\n",
    "# Adding a third LSTM layer and some Dropout regularisation\n",
    "regressor.add(LSTM(units = 50, return_sequences = True))\n",
    "regressor.add(Dropout(0.2))\n",
    "\n",
    "# Adding a fourth LSTM layer and some Dropout regularisation\n",
    "regressor.add(LSTM(units = 50))\n",
    "regressor.add(Dropout(0.2))\n",
    "\n",
    "# Adding the output layer\n",
    "regressor.add(Dense(units = 1))\n",
    "\n",
    "# Compiling the RNN\n",
    "regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n",
    "\n",
    "# Fitting the RNN to the Training set\n",
    "regressor.fit(X_train, y_train, epochs = 150, batch_size = 64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-10-28T21:05:18.836915Z",
     "start_time": "2019-10-28T21:05:18.602543Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Part 3 - Making the predictions and visualising the results\n",
    "\n",
    "# Getting the real stock price of 2017\n",
    "dataset_test = pd.read_csv('./marketdata/soybean/zsh20Test.csv')\n",
    "real_stock_price = dataset_test.iloc[:, 4:5].values\n",
    "\n",
    "# Getting the predicted stock price of 2017\n",
    "dataset_total = pd.concat((dataset_train['Last'], dataset_test['Last']), axis = 0)\n",
    "inputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values\n",
    "inputs = inputs.reshape(-1,1)\n",
    "inputs = sc.transform(inputs)\n",
    "X_test = []\n",
    "for i in range(60, 100): ##60 + Number of Test Rows\n",
    "    X_test.append(inputs[i-60:i, 0])\n",
    "type(X_test)\n",
    "X_test = np.array(X_test)\n",
    "X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\n",
    "predicted_stock_price = regressor.predict(X_test)\n",
    "predicted_stock_price = sc.inverse_transform(predicted_stock_price)\n",
    "\n",
    "fig = plt.figure(figsize=(12,8))\n",
    "# Visualising the results\n",
    "plt.plot(real_stock_price, color = 'red',  marker='o', label = 'Real Stock Price')\n",
    "plt.plot(predicted_stock_price, color = 'blue',  marker='o', label = 'Predicted Stock Price')\n",
    "plt.title('Stock Price Prediction')\n",
    "plt.xlabel('Time')\n",
    "plt.ylabel('Stock Price')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-10-28T21:17:35.122996Z",
     "start_time": "2019-10-28T21:17:34.865860Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "data=real_stock_price<br>Time=%{x}<br>prices=%{y}",
         "legendgroup": "data=real_stock_price",
         "line": {
          "color": "#636efa",
          "dash": "solid"
         },
         "mode": "lines",
         "name": "data=real_stock_price",
         "showlegend": true,
         "type": "scatter",
         "x": [
          "9/3/2019",
          "9/4/2019",
          "9/5/2019",
          "9/6/2019",
          "9/9/2019",
          "9/10/2019",
          "9/11/2019",
          "9/12/2019",
          "9/13/2019",
          "9/16/2019",
          "9/17/2019",
          "9/18/2019",
          "9/19/2019",
          "9/20/2019",
          "9/23/2019",
          "9/24/2019",
          "9/25/2019",
          "9/26/2019",
          "9/27/2019",
          "9/30/2019",
          "10/1/2019",
          "10/2/2019",
          "10/3/2019",
          "10/4/2019",
          "10/7/2019",
          "10/8/2019",
          "10/9/2019",
          "10/10/2019",
          "10/11/2019",
          "10/14/2019",
          "10/15/2019",
          "10/16/2019",
          "10/17/2019",
          "10/18/2019",
          "10/21/2019",
          "10/22/2019",
          "10/23/2019",
          "10/24/2019",
          "10/25/2019"
         ],
         "xaxis": "x",
         "y": [
          895,
          901.75,
          888.75,
          886,
          885.75,
          899,
          894,
          921.25,
          924,
          925.75,
          919.5,
          915.25,
          918.25,
          908.75,
          917,
          919,
          915,
          915,
          910,
          930,
          941.5,
          938.5,
          936.5,
          940.75,
          940.5,
          947,
          949.75,
          949.5,
          961,
          965,
          959.25,
          954.5,
          957,
          959.25,
          959,
          959.75,
          959.5,
          958.5,
          946.75
         ],
         "yaxis": "y"
        },
        {
         "hoverlabel": {
          "namelength": 0
         },
         "hovertemplate": "data=predicted_stock_price<br>Time=%{x}<br>prices=%{y}",
         "legendgroup": "data=predicted_stock_price",
         "line": {
          "color": "#636efa",
          "dash": "dot"
         },
         "mode": "lines",
         "name": "data=predicted_stock_price",
         "showlegend": true,
         "type": "scatter",
         "x": [
          "9/3/2019",
          "9/4/2019",
          "9/5/2019",
          "9/6/2019",
          "9/9/2019",
          "9/10/2019",
          "9/11/2019",
          "9/12/2019",
          "9/13/2019",
          "9/16/2019",
          "9/17/2019",
          "9/18/2019",
          "9/19/2019",
          "9/20/2019",
          "9/23/2019",
          "9/24/2019",
          "9/25/2019",
          "9/26/2019",
          "9/27/2019",
          "9/30/2019",
          "10/1/2019",
          "10/2/2019",
          "10/3/2019",
          "10/4/2019",
          "10/7/2019",
          "10/8/2019",
          "10/9/2019",
          "10/10/2019",
          "10/11/2019",
          "10/14/2019",
          "10/15/2019",
          "10/16/2019",
          "10/17/2019",
          "10/18/2019",
          "10/21/2019",
          "10/22/2019",
          "10/23/2019",
          "10/24/2019",
          "10/25/2019",
          "10/26/2019"
         ],
         "xaxis": "x",
         "y": [
          896.81103515625,
          897.0263671875,
          898.0695190429688,
          899.2277221679688,
          899.8565063476562,
          899.7190551757812,
          899.5001831054688,
          899.4732666015625,
          900.8899536132812,
          904.2717895507812,
          909.2543334960938,
          914.558349609375,
          918.9052124023438,
          921.8280029296875,
          922.89013671875,
          922.6598510742188,
          921.8453979492188,
          920.6997680664062,
          919.3978271484375,
          917.832763671875,
          917.0379638671875,
          918.0799560546875,
          920.8071899414062,
          924.3407592773438,
          928.0353393554688,
          931.3466796875,
          934.3088989257812,
          937.037353515625,
          939.4417724609375,
          942.0902709960938,
          945.2517700195312,
          948.2554931640625,
          950.2987060546875,
          951.3453979492188,
          951.7634887695312,
          951.8391723632812,
          951.8099975585938,
          951.7672119140625,
          951.6710815429688,
          950.7025146484375
         ],
         "yaxis": "y"
        }
       ],
       "layout": {
        "height": 600,
        "legend": {
         "tracegroupgap": 0
        },
        "margin": {
         "t": 60
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          0.98
         ],
         "title": {
          "text": "Time"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "prices"
         }
        }
       }
      },
      "text/html": [
       "<div>\n",
       "        \n",
       "        \n",
       "            <div id=\"f9bcc070-ab4f-4a19-a834-0f3b0c6bf71e\" class=\"plotly-graph-div\" style=\"height:600px; width:100%;\"></div>\n",
       "            <script type=\"text/javascript\">\n",
       "                require([\"plotly\"], function(Plotly) {\n",
       "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
       "                    \n",
       "                if (document.getElementById(\"f9bcc070-ab4f-4a19-a834-0f3b0c6bf71e\")) {\n",
       "                    Plotly.newPlot(\n",
       "                        'f9bcc070-ab4f-4a19-a834-0f3b0c6bf71e',\n",
       "                        [{\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"data=real_stock_price<br>Time=%{x}<br>prices=%{y}\", \"legendgroup\": \"data=real_stock_price\", \"line\": {\"color\": \"#636efa\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"data=real_stock_price\", \"showlegend\": true, \"type\": \"scatter\", \"x\": [\"9/3/2019\", \"9/4/2019\", \"9/5/2019\", \"9/6/2019\", \"9/9/2019\", \"9/10/2019\", \"9/11/2019\", \"9/12/2019\", \"9/13/2019\", \"9/16/2019\", \"9/17/2019\", \"9/18/2019\", \"9/19/2019\", \"9/20/2019\", \"9/23/2019\", \"9/24/2019\", \"9/25/2019\", \"9/26/2019\", \"9/27/2019\", \"9/30/2019\", \"10/1/2019\", \"10/2/2019\", \"10/3/2019\", \"10/4/2019\", \"10/7/2019\", \"10/8/2019\", \"10/9/2019\", \"10/10/2019\", \"10/11/2019\", \"10/14/2019\", \"10/15/2019\", \"10/16/2019\", \"10/17/2019\", \"10/18/2019\", \"10/21/2019\", \"10/22/2019\", \"10/23/2019\", \"10/24/2019\", \"10/25/2019\"], \"xaxis\": \"x\", \"y\": [895.0, 901.75, 888.75, 886.0, 885.75, 899.0, 894.0, 921.25, 924.0, 925.75, 919.5, 915.25, 918.25, 908.75, 917.0, 919.0, 915.0, 915.0, 910.0, 930.0, 941.5, 938.5, 936.5, 940.75, 940.5, 947.0, 949.75, 949.5, 961.0, 965.0, 959.25, 954.5, 957.0, 959.25, 959.0, 959.75, 959.5, 958.5, 946.75], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"data=predicted_stock_price<br>Time=%{x}<br>prices=%{y}\", \"legendgroup\": \"data=predicted_stock_price\", \"line\": {\"color\": \"#636efa\", \"dash\": \"dot\"}, \"mode\": \"lines\", \"name\": \"data=predicted_stock_price\", \"showlegend\": true, \"type\": \"scatter\", \"x\": [\"9/3/2019\", \"9/4/2019\", \"9/5/2019\", \"9/6/2019\", \"9/9/2019\", \"9/10/2019\", \"9/11/2019\", \"9/12/2019\", \"9/13/2019\", \"9/16/2019\", \"9/17/2019\", \"9/18/2019\", \"9/19/2019\", \"9/20/2019\", \"9/23/2019\", \"9/24/2019\", \"9/25/2019\", \"9/26/2019\", \"9/27/2019\", \"9/30/2019\", \"10/1/2019\", \"10/2/2019\", \"10/3/2019\", \"10/4/2019\", \"10/7/2019\", \"10/8/2019\", \"10/9/2019\", \"10/10/2019\", \"10/11/2019\", \"10/14/2019\", \"10/15/2019\", \"10/16/2019\", \"10/17/2019\", \"10/18/2019\", \"10/21/2019\", \"10/22/2019\", \"10/23/2019\", \"10/24/2019\", \"10/25/2019\", \"10/26/2019\"], \"xaxis\": \"x\", \"y\": [896.81103515625, 897.0263671875, 898.0695190429688, 899.2277221679688, 899.8565063476562, 899.7190551757812, 899.5001831054688, 899.4732666015625, 900.8899536132812, 904.2717895507812, 909.2543334960938, 914.558349609375, 918.9052124023438, 921.8280029296875, 922.89013671875, 922.6598510742188, 921.8453979492188, 920.6997680664062, 919.3978271484375, 917.832763671875, 917.0379638671875, 918.0799560546875, 920.8071899414062, 924.3407592773438, 928.0353393554688, 931.3466796875, 934.3088989257812, 937.037353515625, 939.4417724609375, 942.0902709960938, 945.2517700195312, 948.2554931640625, 950.2987060546875, 951.3453979492188, 951.7634887695312, 951.8391723632812, 951.8099975585938, 951.7672119140625, 951.6710815429688, 950.7025146484375], \"yaxis\": \"y\"}],\n",
       "                        {\"height\": 600, \"legend\": {\"tracegroupgap\": 0}, \"margin\": {\"t\": 60}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 0.98], \"title\": {\"text\": \"Time\"}}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"prices\"}}},\n",
       "                        {\"responsive\": true}\n",
       "                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('f9bcc070-ab4f-4a19-a834-0f3b0c6bf71e');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })\n",
       "                };\n",
       "                });\n",
       "            </script>\n",
       "        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import plotly.express as px\n",
    "\n",
    "prices = pd.DataFrame(real_stock_price, columns=[\"prices\"])\n",
    "prices[\"Time\"] = dataset_test[\"Time\"]\n",
    "prices['data'] = 'real_stock_price'\n",
    "\n",
    "prices1 = pd.DataFrame(predicted_stock_price, columns=[\"prices\"])\n",
    "prices1[\"Time\"] = dataset_test[\"Time\"]\n",
    "prices1['data'] = 'predicted_stock_price'\n",
    "prices1.fillna(\"10/26/2019\", inplace=True)\n",
    "\n",
    "prices = prices.append(prices1, ignore_index=True)\n",
    "\n",
    "fig = px.line(prices, x=\"Time\", y=\"prices\", line_dash=\"data\")\n",
    "fig.show()"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
